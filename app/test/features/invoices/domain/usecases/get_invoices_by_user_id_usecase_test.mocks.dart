// Mocks generated by Mockito 5.4.4 from annotations
// in app/test/features/invoices/domain/usecases/get_invoices_by_user_id_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app/core/error/failures.dart' as _i5;
import 'package:app/features/invoices/domain/entities/invoice_detailed_entity.dart'
    as _i7;
import 'package:app/features/invoices/domain/entities/invoice_entity.dart'
    as _i8;
import 'package:app/features/invoices/domain/entities/invoices_pagination_entity.dart'
    as _i6;
import 'package:app/features/invoices/domain/repositories/invoice_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InvoiceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInvoiceRepository extends _i1.Mock implements _i3.InvoiceRepository {
  MockInvoiceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.InvoicesPaginationEntity>> getInvoices(
    int? page,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInvoices,
          [
            page,
            limit,
          ],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, _i6.InvoicesPaginationEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.InvoicesPaginationEntity>(
          this,
          Invocation.method(
            #getInvoices,
            [
              page,
              limit,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.InvoicesPaginationEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.InvoicesPaginationEntity>>
      getInvoicesByUserId(
    int? userId,
    int? page,
    int? limit,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getInvoicesByUserId,
              [
                userId,
                page,
                limit,
              ],
            ),
            returnValue: _i4.Future<
                    _i2
                    .Either<_i5.Failure, _i6.InvoicesPaginationEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.InvoicesPaginationEntity>(
              this,
              Invocation.method(
                #getInvoicesByUserId,
                [
                  userId,
                  page,
                  limit,
                ],
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, _i6.InvoicesPaginationEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.InvoiceDetailedEntity>> getInvoiceById(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInvoiceById,
          [id],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, _i7.InvoiceDetailedEntity>>.value(
            _FakeEither_0<_i5.Failure, _i7.InvoiceDetailedEntity>(
          this,
          Invocation.method(
            #getInvoiceById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.InvoiceDetailedEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.InvoiceEntity>> createInvoice(
          _i8.InvoiceEntity? invoice) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInvoice,
          [invoice],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i8.InvoiceEntity>>.value(
                _FakeEither_0<_i5.Failure, _i8.InvoiceEntity>(
          this,
          Invocation.method(
            #createInvoice,
            [invoice],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.InvoiceEntity>>);
}
